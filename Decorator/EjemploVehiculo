//PrimerVersionPatronDecorator
//MedinaPalmira


public abstract class Vehiculo
{
   // Atributo común a todos los objetos que heredarán de esta clase
   protected string descripcion = "Vehículo genérico";
 
    // Método no abstracto que devolverá el contenido de la descripción
    // Se declara como virtual para que pueda sustituirse en las clases derivadas
    public virtual string Descripcion()
    {
        return descripcion;
    }
 
    // Métodos abstractos
    public abstract int VelocidadMaxima();
    public abstract double Consumo();
} 
public class Monovolumen : Vehiculo
{
    public Monovolumen()
    {
        descripcion = "Monovolumen";
    }
 
    // Funcionalidad básica
    public override int VelocidadMaxima()
    {
        return 160;
    }
 
    // Funcionalidad básica
    public override double Consumo()
    {
        return 7.5;
    }
}
public class Berlina : Vehiculo
{
    public Berlina()
    {
        descripcion = "Berlina";
    }
 
    public override int VelocidadMaxima()
    {
        return 180;
    }
 
    public override double Consumo()
    {
        return 6.2;
    }
}
public abstract class Decorator : Vehiculo
{
    // Declaramos el método como abstracto para que todos los decoradores lo
    // reimplementen.
    public override abstract string Descripcion();
}
public class Gasolina : Decorator
{
    // Instancia de la clase vehiculo
    private Vehiculo vehiculo;
 
    // Constructor que recibe el vehículo que encapsulará el decorator
    public Gasolina(Vehiculo vehiculo)
    {
        this.vehiculo = vehiculo;
    }
 
    // Los métodos utilizan la información del objeto encapsulado y le
    // incorporan su propia funcionalidad.
    public override string Descripcion()
    {
        return vehiculo.Descripcion() + " Gasolina";
    }
 
    // Un vehículo gasolina proporciona más potencia, por lo que "decora" el
    // vehiculo añadiendo mayor velocidad máxima
    public override int VelocidadMaxima()
    {
        return vehiculo.VelocidadMaxima() + 60;
    }
 
    // La gasolina es menos energética que el diesel, por lo que el consumo
    // de combustible es mayor. Decoraremos el vehículo añadiéndole un consumo
    // de 1.2 litros adicionales a los 100 km.
    public override double Consumo()
    {
        return vehiculo.Consumo() + 1.2;
    }
}
public class Diesel : Decorator
{
    // Instancia de la clase vehiculo
    private Vehiculo vehiculo;
 
    // Constructor que recibe el vehículo que encapsulará el decorator
    public Diesel(Vehiculo vehiculo)
    {
        this.vehiculo = vehiculo;
    }
 
    // Los métodos utilizan la información del objeto encapsulado y le
    // incorporan su propia funcionalidad.
    public override string Descripcion()
    {
        return vehiculo.Descripcion() + " Diesel";
    }
 
    public override int VelocidadMaxima()
    {
        return vehiculo.VelocidadMaxima() + 20;
    }
 
    public override double Consumo()
    {
        return vehiculo.Consumo() - 0.8;
    }
}
public class Turbo : Decorator
{
    private Vehiculo vehiculo;
 
    public Turbo(Vehiculo vehiculo)
    {
        this.vehiculo = vehiculo;
    }
 
    public override string Descripcion()
    {
        return vehiculo.Descripcion() + " Turbo";
    }
 
    public override int VelocidadMaxima()
    {
        return vehiculo.VelocidadMaxima() + 30;
    }
 
    public override double Consumo()
    {
        return vehiculo.Consumo() + 0.4;
    }
}

public class Inyeccion : Decorator
{
    private Vehiculo vehiculo;
 
    public Inyeccion(Vehiculo vehiculo)
    {
        this.vehiculo = vehiculo;
    }
 
    public override string Descripcion()
    {
        return vehiculo.Descripcion() + " Inyección";
    }
 
    public override int VelocidadMaxima()
    {
        return vehiculo.VelocidadMaxima();
    }
 
    public override double Consumo()
    {
        return vehiculo.Consumo() - 1.2;
    }
}

public class CommonRail : Decorator
{
    private Vehiculo vehiculo;
 
    public CommonRail(Vehiculo vehiculo)
    {
        this.vehiculo = vehiculo;
    }
 
    public override string Descripcion()
    {
        return vehiculo.Descripcion() + " Common Rail";
    }
 
    public override int VelocidadMaxima()
    {
        return vehiculo.VelocidadMaxima() - 15;
    }
 
    public override double Consumo()
    {
        return vehiculo.Consumo() - 0.4;
    }
}
class Program
{
    static void Main(string[] args)
    {
        Vehiculo monovolumen = new Monovolumen();
        Vehiculo berlina = new Berlina();
 
        MostrarCaracteristicas(monovolumen);
        MostrarCaracteristicas(berlina);
    }
 
    private static void MostrarCaracteristicas(Vehiculo v)
    {
        Console.WriteLine(string.Format("{0}\n\t- Velocidad punta de {1} km/h \n\tConsumo medio de {2} l/100km\n",
                                        v.Descripcion(),
                                        v.VelocidadMaxima(),
                                        v.Consumo()));
    }
}
